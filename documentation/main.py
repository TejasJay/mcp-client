from mcp.server.fastmcp import FastMCP
from dotenv import load_dotenv
import httpx
import os
from bs4 import BeautifulSoup  # you were using this without import

load_dotenv()

mcp = FastMCP("docs")

USER_AGENT = "docs-app/1.0"
SERPER_URL = "https://google.serper.dev/search"

docs_urls = {
    "amazon nova": "https://docs.aws.amazon.com/pdfs/nova/latest/userguide/nova-ug.pdf",
    "langchain": "https://python.langchain.com/docs/",
    "llama-index": "https://docs.llamaindex.ai/en/stable/",
    "openai": "https://platform.openai.com/docs/"
}

# Corrected search_web function
async def search_web(query: str) -> dict | None:
    payload = {  # no need to json.dumps; httpx will serialize
        "q": query,
        "num": 2
    }

    headers = {
        "X-API-KEY": os.getenv("SERPER_API_KEY"),
        "Content-Type": "application/json"
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(SERPER_URL, headers=headers, json=payload, timeout=30.0)
            response.raise_for_status()
            return response.json()
    except httpx.TimeoutException:
        return {"organic": []}  # typo fixed: 'organcic' â†’ 'organic'}

# fetch the text generated by the search
async def fetch_url(url: str):
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(url, timeout=30.0)
            soup = BeautifulSoup(response.text, "html.parser")
            text = soup.get_text()
            return text
        except httpx.TimeoutException:
            return "Timeout error"

# get docs text for the given query and library
@mcp.tool()
async def get_docs(query: str, library: str):
    """
    Search the docs for a given query and library
    Supports langchain, llama-index, openai

    Args:
        query: The query to search for (e.g. "Chroma DB")
        library: The library to search in (e.g. "langchain")

    Returns:
        Text from the docs
    """
    if library not in docs_urls:
        raise ValueError(f"Library {library} not supported by this tool")

    query = f"site:{docs_urls[library]} {query}"
    results = await search_web(query)
    if not results.get("organic"):
        return "No results found"

    text = ""
    for result in results["organic"]:
        text += await fetch_url(result["link"])
    return text

if __name__ == "__main__":
    mcp.run(transport="stdio")
